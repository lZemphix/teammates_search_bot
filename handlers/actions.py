from keyboards import reply, inline
from utils import states
import sqlite3
from data import desc
from data.config import UID
import asyncio
admin_uids = [] 
admin_uids = UID

#–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
async def start_message(database, message):
    database()
    if database.cursor.execute(f"SELECT * FROM users WHERE uid = {message.from_user.id}").fetchone():
        pass
    else:
        database.cursor.execute(f"INSERT INTO users (uid, username, age, gender, connect, microphone, description, games, active_timer, ban_days) VALUES ({message.from_user.id}, 'unknown', 0, 'unknown', 'unknown', 'unknown','none', 'none', 60, 0)") #number ,uid, username,age, gender, connect, microphone
        #desc, games, active_timer, ban_days 
        database.db.commit()

    database.db.commit()
    database.db.close
    await message.answer(f"""{desc.start(message)}""" )
    

async def createanc_start(message, database, uid, state):
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è.")
    await state.set_state(states.create_anc.name)

async def createanc_name(message, database, uid, state):
    await state.update_data(name = message.text)
    # await state.set_state(states.create_anc.name)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
    await state.set_state(states.create_anc.age)


async def createanc_age(message, database, uid, state):
    await state.update_data(age = message.text)
    await message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å, –¥–≤–∞–≤–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –ø–æ–ª–æ–º. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞—Ä–Ω—Ç.", reply_markup = inline.gender())
    await state.set_state(states.create_anc.gender)


async def createanc_gender(callback, database, uid, state):
    await state.update_data(gender = callback.data)    
    await callback.message.delete()
    await callback.message.answer("–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–∞–∫ —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è. –ù–∞–ø—Ä–∏–º–µ—Ä (Nickname - –¥–∏—Å–∫–æ—Ä–¥)")
    await state.set_state(states.create_anc.connect)

async def createanc_connect(message, database, uid, state):
    await state.update_data(connect = message.text)
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ—à—å —Ç–∏–º–º–µ–π—Ç–æ–≤. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")
    await state.set_state(states.create_anc.games)
   
async def createanc_games(message, database, uid, state):
    await state.update_data(games = message.text.lower())
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–∫—Ä–æ—Ñ–æ–Ω", reply_markup = inline.micro())
    await state.set_state(states.create_anc.microphone)

async def createanc_microphone(callback, database, uid, state):
    await state.update_data(microphone = callback.data)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ–±–µ –∏ –æ —Å–≤–æ–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö.")
    await state.set_state(states.create_anc.description)

async def createanc_description(message, uid, state, user_dict, db):
    await state.update_data(description = message.text)
    user_dict[message.from_user.id] = await state.get_data()
    await state.clear()
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤.")
    db.cursor.execute("UPDATE users SET username = ? WHERE uid = ?", ( user_dict[message.from_user.id]['name'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET age = ? WHERE uid = ?", ( user_dict[message.from_user.id]['age'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET gender = ? WHERE uid = ?", ( user_dict[message.from_user.id]['gender'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET connect = ? WHERE uid = ?", ( user_dict[message.from_user.id]['connect'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET microphone = ? WHERE uid = ?", ( user_dict[message.from_user.id]['microphone'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET games = ? WHERE uid = ?", ( user_dict[message.from_user.id]['games'], message.from_user.id,))
    db.cursor.execute("UPDATE users SET description = ? WHERE uid = ?", ( user_dict[message.from_user.id]['description'], message.from_user.id,))
    db.db.commit()

async def my_anc(message, database, uid):
    database.cursor.execute("SELECT username FROM users WHERE uid = ?", (uid,))
    user_name = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT age FROM users WHERE uid = ?", (uid,))
    age = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT gender FROM users WHERE uid = ?", (uid,))
    gender = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT connect FROM users WHERE uid = ?", (uid,))
    connect = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT games FROM users WHERE uid = ?", (uid,))
    games = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT microphone FROM users WHERE uid = ?", (uid,))
    micro = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT description FROM users WHERE uid = ?", (uid,))
    descr = database.cursor.fetchone()[0]
    await message.answer(f"""üìß–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:
                         
üë§–ù–∏–∫–Ω–µ–π–º: {user_name}
üéÇ–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
üë´–ü–æ–ª: {gender}
üìû–°–≤—è–∑—å: {connect}
üïπ–ò–≥—Ä—ã: {games}
üé§–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {micro}
üìÉ–û–ø–∏—Å–∞–Ω–∏–µ: {descr} """)



async def admin_panel(callback, database):
    if callback.from_user.id in UID:
        await callback.answer(f"""–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–µ—ã–π –≤–∞—Ä–∏–∞–Ω—Ç""", reply_markup = inline.admin_panel())
    else:
        await callback.answer(f"""–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!""")


async def search_random_user(message, database):
    from random import randint
    database.cursor.execute("SELECT games FROM users WHERE uid = ?", (message.from_user.id,))
    game = database.cursor.fetchone()[0]
    database.cursor.execute("SELECT * FROM users WHERE games = ? AND uid != ? ORDER BY RANDOM() LIMIT 1", (game.lower(), message.from_user.id,))
    random_user = database.cursor.fetchone()
    user_name = random_user[2]
    age = random_user[3]
    gender = random_user[4]
    connect = random_user[5]
    games = random_user[8]
    micro = random_user[6]
    descr = random_user[7]
    await message.answer(f"""üìß–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                            
    üë§–ù–∏–∫–Ω–µ–π–º: {user_name}
    üéÇ–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
    üë´–ü–æ–ª: {gender}
    üìû–°–≤—è–∑—å: {connect}
    üïπ–ò–≥—Ä–∞: {games}
    üé§–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {micro}
    üìÉ–û–ø–∏—Å–∞–Ω–∏–µ: {descr} """)

