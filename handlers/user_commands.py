from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from database.database import database
from keyboards.inline import *
from aiogram.fsm.context import FSMContext
from utils.dicts import *
from utils.states import *
from data import desc
from data.config import UID

admin_uids = UID
router = Router()

@router.message(Command("start"), StateFilter(default_state))
async def start_message(message: Message):
    database().create_db()
    user_exists = database.cursor.execute(f"SELECT * FROM users WHERE uid = {message.from_user.id}").fetchone()
    if user_exists:
        pass
    else:
        database.cursor.execute(f"INSERT INTO users (uid, username, age, gender, connect, microphone, description, games, ban_days) VALUES ({message.from_user.id}, 'unknown', 0, 'unknown', 'unknown', 'unknown','none', 'none', 0)")
    database().save()
    
    buttons, callbacks = ['üìÉ –ê–Ω–∫–µ—Ç–∞', '‚ùó –ü—Ä–∞–≤–∏–ª–∞', '‚ùì –ü–æ–º–æ—â—å', 'üîé –ü–æ–∏—Å–∫'],['ancet', 'rules', 'help', 'search']
    
    if message.from_user.id in admin_uids:
        buttons.append('‚öô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
        callbacks.append('admin')
    
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–∏–º–º–µ–π—Ç–∞ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–∫—É –∏–ª–∏ –¥—Ä—É–∑–µ–π –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç.""", reply_markup=Kb_maker().callback_buttons(titles=buttons, callbacks=callbacks, rows=2))

@router.callback_query(F.data == 'rules')
async def rules(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(desc.rules, reply_markup=Kb_maker().main_button())

@router.callback_query(F.data == 'donate')
async def donate(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(desc.donate, reply_markup=Kb_maker().main_button())
              
@router.callback_query(F.data == 'help')
async def help(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(desc.help, reply_markup=Kb_maker().callback_button('üí≤ –î–æ–Ω–∞—Ç', 'donate'))


@router.callback_query(F.data == ("edit_anc"), StateFilter(default_state))
async def edit_ancet(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup = Kb_maker().callback_buttons(
        titles=["–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏", "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"],
        callbacks=["change_desc", "change_game", "change_connect", "delete_ancet"]))

@router.callback_query(F.data == "ancet")
async def editanc(callback: CallbackQuery):
    await callback.message.delete()
    username = database.cursor.execute("SELECT username FROM users WHERE uid = ?", (callback.from_user.id,)).fetchone()[0]
    if username == "unknown":
        await callback.message.answer("–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ 'üìÉ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É' ",  reply_markup=Kb_maker().callback_button('üìÉ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É','create_anc'))
    else:
        user_data = database.cursor.execute("SELECT * FROM users WHERE uid = ?", (callback.from_user.id,)).fetchone()
        await callback.message.answer(f"""üìß–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:
                         
üë§–ù–∏–∫–Ω–µ–π–º: {user_data[2]}
üéÇ–í–æ–∑—Ä–∞—Å—Ç: {user_data[3]} –ª–µ—Ç
üë´–ü–æ–ª: {user_data[4]}
üìû–°–≤—è–∑—å: {user_data[5]}
üïπ–ò–≥—Ä–∞: {user_data[8]}
üé§–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {user_data[6]}
üìÉ–û–ø–∏—Å–∞–Ω–∏–µ: {user_data[7]} """, reply_markup=Kb_maker().callback_button('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', 'edit_anc'))
        database().save()

@router.callback_query(F.data == "search")
async def search(callback: CallbackQuery):
    game = database.cursor.execute("SELECT games FROM users WHERE uid = ?", (callback.from_user.id,)).fetchone()[0]
    if game == "none":
        callback.message.delete()
        await callback.message.answer("–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ 'üìÉ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É' ",  reply_markup=Kb_maker().callback_button('üìÉ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É','create_anc'))
    else:
        try:
            random_user = database.cursor.execute("SELECT * FROM users WHERE games = ? AND uid != ? ORDER BY RANDOM() LIMIT 1", (game, callback.from_user.id,)).fetchone()
            if random_user:
                await callback.message.answer(f"""üìß–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                                                                            
üë§–ù–∏–∫–Ω–µ–π–º: {random_user[2]}
üéÇ–í–æ–∑—Ä–∞—Å—Ç: {random_user[3]} –ª–µ—Ç
üë´–ü–æ–ª: {random_user[4]}
üìû–°–≤—è–∑—å: {random_user[5]}
üïπ–ò–≥—Ä–∞: {random_user[8]}
üé§–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {random_user[6]}
üìÉ–û–ø–∏—Å–∞–Ω–∏–µ: {random_user[7]} """, reply_markup = Kb_maker().callback_buttons(["–î–∞–ª–µ–µ", "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"], ["search",str(random_user[1])]))
                await callback.message.delete()
                database().save()
            else:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ª—é–¥–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –≤ –¥–∞–Ω–Ω—É—é –∏–≥—Ä—É :(")

        except TypeError:
            await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ª—é–¥–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –≤ –¥–∞–Ω–Ω—É—é –∏–≥—Ä—É :(") 
            # print("NoneType error")

@router.callback_query(F.data == "main")
async def main(callback: CallbackQuery):
    await callback.message.delete()
    database().create_db()
    if database.cursor.execute(f"SELECT * FROM users WHERE uid = {callback.from_user.id}").fetchone():
        pass
    else:
        database.cursor.execute(f"INSERT INTO users (uid, username, age, gender, connect, microphone, description, games, ban_days) VALUES ({callback.from_user.id}, 'unknown', 0, 'unknown', 'unknown', 'unknown','none', 'none', 0)")  
    buttons, callbacks = ["üìÉ –ê–Ω–∫–µ—Ç–∞", "‚ùó –ü—Ä–∞–≤–∏–ª–∞", "‚ùì –ü–æ–º–æ—â—å", "üîé –ü–æ–∏—Å–∫"], ['ancet', 'rules', 'help', 'search']
    if callback.from_user.id in admin_uids:
        buttons.append('‚öô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
        callbacks.append('admin')
    
    await callback.message.answer(f"""–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–∏–º–º–µ–π—Ç–∞ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–∫—É –∏–ª–∏ –¥—Ä—É–∑–µ–π –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø—É–Ω–∫—Ç.""", reply_markup=Kb_maker().callback_buttons(titles=buttons, callbacks=callbacks, rows=2))

@router.callback_query(F.data.regexp(r"^(\d+)$").as_("uid"))
async def report_system(callback: CallbackQuery, bot: Bot, uid: int):
        database.cursor.execute("SELECT * FROM users WHERE uid = ?", (uid[0],))
        random_user_data = database.cursor.fetchone()
        database().save()
        await bot.send_message(chat_id =admin_uids[0], text = f"""üìß–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                         
üë§–ù–∏–∫–Ω–µ–π–º: {random_user_data[2]}
üéÇ–í–æ–∑—Ä–∞—Å—Ç: {random_user_data[3]} –ª–µ—Ç
üë´–ü–æ–ª: {random_user_data[4]}
üìû–°–≤—è–∑—å: {random_user_data[5]}
üïπ–ò–≥—Ä–∞: {random_user_data[8]}
üé§–ú–∏–∫—Ä–æ—Ñ–æ–Ω: {random_user_data[6]}
üìÉ–û–ø–∏—Å–∞–Ω–∏–µ: {random_user_data[7]} 

uid: `{uid[0]}`""", parse_mode='MARKDOWN', reply_markup=Kb_maker().callback_button('–ó–∞–±–∞–Ω–∏—Ç—å', 'ban_user'))
        await callback.message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await search(callback)
        
@router.message(Command("cancel"), ~StateFilter(default_state))
async def cancel_accept(message: Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!")
    await state.clear()
    await start_message(message)
    
@router.message(Command("cancel"))
async def incorrect_cancel(message: Message):
    await message.answer("–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ!")

@router.callback_query(F.data == 'create_anc', StateFilter(default_state))
async def createanc(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –±–∞–Ω–∞–ª—å–Ω–æ–≥–æ. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º.")
    await state.set_state(create_anc.name)
 
@router.message(StateFilter(create_anc.name))
async def createanc_name(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
    await state.set_state(create_anc.age)

@router.message(StateFilter(create_anc.age), lambda x: x.text.isdigit() and 6 <= int(x.text) <= 100)
async def correct_age(message: Message, state: FSMContext):
    await state.update_data(age = message.text)
    await message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å, –¥–≤–∞–≤–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º –ø–æ–ª–æ–º. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞—Ä–Ω—Ç.", reply_markup = Kb_maker().callback_buttons(["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π", "–Ω–µ –æ–ø—Ä–µ–¥–µ–Ω"],["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π", "–Ω–µ –æ–ø—Ä–µ–¥–µ–Ω"], main_button=False))
    await state.set_state(create_anc.gender)

@router.message(StateFilter(create_anc.age))
async def incorrect_age(message: Message):
    await message.answer("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")

@router.callback_query(StateFilter(create_anc.gender), F.data.in_(["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π", "–Ω–µ –æ–ø—Ä–µ–¥–µ–Ω"]))
async def correct_gender(callback: CallbackQuery, state: FSMContext):
    await state.update_data(gender = callback.data)    
    await callback.message.delete()
    await callback.message.answer("–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –∫–∞–∫ —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è. –ù–∞–ø—Ä–∏–º–µ—Ä 'Nickname - –¥–∏—Å–∫–æ—Ä–¥' –∏–ª–∏ '@username - —Ç–µ–ª–µ–≥—Ä–∞–º'")
    await state.set_state(create_anc.connect)

@router.message(StateFilter(create_anc.gender))
async def incorrect_gender(message: Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!")
    
@router.message(StateFilter(create_anc.connect))
async def correct_connect(message: Message, state: FSMContext):
    await state.update_data(connect = message.text)
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä Minecraft, Dota 2 –∏ —Ç–¥.(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏–≥—Ä—É).")
    await state.set_state(create_anc.games)

@router.message(StateFilter(create_anc.games))
async def correct_games(message: Message, state: FSMContext):
    await state.update_data(games = message.text.lower())
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏–∫—Ä–æ—Ñ–æ–Ω", reply_markup = Kb_maker().callback_buttons(["–µ—Å—Ç—å", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"], ["–µ—Å—Ç—å", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"], main_button=False))
    await state.set_state(create_anc.microphone)

@router.callback_query(StateFilter(create_anc.microphone), F.data.in_(["–µ—Å—Ç—å", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]))
async def correct_microphone(callback: CallbackQuery, state: FSMContext):
    await state.update_data(microphone = callback.data)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ–±–µ –∏ –æ —Å–≤–æ–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö.")
    await state.set_state(create_anc.description)


@router.message(StateFilter(create_anc.description))
async def correct_description(message: Message, state: FSMContext):
    await state.update_data(description = message.text)
    uid = message.from_user.id
    user_dict[uid] = await state.get_data()
    await state.clear()
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤.")
    database.cursor.execute("UPDATE users SET username = ? WHERE uid = ?", ( user_dict[uid]['name'], uid,))
    database.cursor.execute("UPDATE users SET age = ? WHERE uid = ?", ( user_dict[uid]['age'], uid,))
    database.cursor.execute("UPDATE users SET gender = ? WHERE uid = ?", ( user_dict[uid]['gender'], uid,))
    database.cursor.execute("UPDATE users SET connect = ? WHERE uid = ?", ( user_dict[uid]['connect'], uid,))
    database.cursor.execute("UPDATE users SET microphone = ? WHERE uid = ?", ( user_dict[uid]['microphone'], uid,))
    database.cursor.execute("UPDATE users SET games = ? WHERE uid = ?", ( ((user_dict[uid]['games']).lower()).replace(" ", ""), uid,))
    database.cursor.execute("UPDATE users SET description = ? WHERE uid = ?", ( user_dict[uid]['description'], uid,))
    database().save()
    await start_message(message)

@router.callback_query(F.data.in_("change_desc"), StateFilter(default_state))
async def edit_ancet(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await state.set_state(edit_anc_state.description)
    await callback.message.delete()

@router.message(StateFilter(edit_anc_state.description))
async def edit_ancet_description(message: Message, state: FSMContext):
    await state.update_data(description = message.text)
    database.cursor.execute(f"UPDATE users SET description = ? WHERE uid = ?", (message.text, message.from_user.id))
    database().save()
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await start_message(message)
    await state.clear()

@router.callback_query(F.data.in_("change_game"), StateFilter(default_state))
async def edit_ancet_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await state.set_state(edit_anc_state.game)
    await callback.message.delete()

@router.message(StateFilter(edit_anc_state.game))
async def edit_ancet_game(message: Message, state: FSMContext):
    await state.update_data(game = message.text)
    database.cursor.execute("UPDATE users SET games = ? WHERE uid = ?", (message.text.lower().replace(" ", ""), message.from_user.id))
    database().save()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await start_message(message)


@router.callback_query(F.data.in_("change_connect"), StateFilter(default_state))
async def edit_ancet(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await state.set_state(edit_anc_state.connect)
    await callback.message.delete()


@router.message(StateFilter(edit_anc_state.connect))
async def edit_ancet_connect(message: Message, state: FSMContext):
    await state.update_data(connect = message.text)
    database.cursor.execute(f"UPDATE users SET connect = ? WHERE uid = ?", (message.text, message.from_user.id))
    database().save()
    await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await state.clear()
    await start_message(message)
